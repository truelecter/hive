[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_1A002D000B504B4633373520-if00

[mcu ebb]
canbus_uuid: bb5e63afce85

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[exclude_object]

[temperature_sensor EBB_NTC]
sensor_type = Generic 3950
sensor_pin = ebb: PA2

[adxl345]
cs_pin = ebb: PB12
spi_software_sclk_pin = ebb: PB10
spi_software_mosi_pin = ebb: PB11
spi_software_miso_pin = ebb: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[extruder]
step_pin = ebb: PD0
dir_pin = !ebb: PD1
enable_pin = !ebb: PD2
rotation_distance = 22.67694
gear_ratio = 50:10
microsteps = 32
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = ebb: PB13
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = ebb: PA3
control = pid
pid_kp = 23.442
pid_ki = 2.030
pid_kd = 67.688
min_temp = 0
max_temp = 300
max_extrude_only_distance = 500

[tmc2209 extruder]
uart_pin = ebb:PA15
run_current = 0.650
stealthchop_threshold = 0

[fan]
pin = ebb: PA1
cycle_time = 0.0001

[heater_fan hotend_fan]
pin = ebb: PA0
heater = extruder
heater_temp = 50.0

[probe]
pin = ^ebb:PB5
z_offset = 5.425
x_offset = 0
y_offset = 19.75
speed = 4
lift_speed = 10
samples = 5
samples_result = median
sample_retract_dist = 1
samples_tolerance = 0.0075
samples_tolerance_retries = 10

[neopixel sb_leds]
pin = ebb:PD3
chain_count = 3
color_order = GRBW
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 0.0

[printer]
kinematics = corexy
max_velocity = 500
max_accel = 8200
max_z_velocity = 20
max_z_accel = 350
square_corner_velocity = 5.0

[temperature_sensor MCU]
sensor_type = temperature_mcu

[temperature_sensor SoC]
sensor_type = temperature_host

[stepper_x]
step_pin = PE2
dir_pin = !PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
endstop_pin = ^ebb:PB6
position_min = 0
position_endstop = 296
position_max = 296
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = false
run_current = 0.9
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = !PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
position_min = 0
position_endstop = 308
position_max = 310
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = false
run_current = 0.9
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = !PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = ^PF5
position_endstop = 0.899
position_max = 290
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PD3
dir_pin = PD2
enable_pin = !PD5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PD0
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PF8
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = PE3
sensor_type = Generic 3950
sensor_pin = PA1
max_power = 0.8
min_temp = 0
max_temp = 120
control = pid
pid_kp = 55.711
pid_ki = 0.430
pid_kd = 1805.028

[temperature_sensor bed_heater]
sensor_type = Generic 3950
sensor_pin = PA0
min_temp = -40
max_temp = 255

[verify_heater heater_bed]
check_gain_time = 80

[temperature_fan chamber]
pin = PE4
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 0.5
hardware_pwm = true
sensor_type = Generic 3950
sensor_pin = PA2
min_temp = 0
max_temp = 70
target_temp = 35.0
control = watermark
gcode_id = C
tachometer_pin = ^PC13
tachometer_ppr = 2

[controller_fan skirt_fan_1]
pin = PB8
kick_start_time = 0.5
heater = heater_bed
hardware_pwm = true
max_power = 0.8
tachometer_pin = ^PC14
tachometer_ppr = 2

[controller_fan skirt_fan_2]
pin = PB9
kick_start_time = 0.5
heater = heater_bed
hardware_pwm = true
max_power = 0.8
tachometer_pin = ^PC15
tachometer_ppr = 2

[idle_timeout]
timeout = 300

[bed_mesh]
speed = 300
horizontal_move_z = 15
mesh_min = 25, 25
mesh_max = 275, 275
fade_start = 0.6
fade_end = 10.0
probe_count = 7,7
zero_reference_position: 150, 150
algorithm = bicubic

[quad_gantry_level]
gantry_corners =
	-60,0
	360,380
points =
	50,25
	50,225
	250,225
	250,25
speed = 200
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.0075
max_adjust = 15

[board_pins]
aliases =

	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,


	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
variable_led_enable = True
variable_status_macro = 'status_meshing'
variable_fuzz_enable = False
variable_fuzz_min = 0
variable_fuzz_max = 4
variable_margin_enable = False
variable_margin_size = 5
variable_probe_dock_enable = True
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_display_parameters = True
gcode =

	{% if display_parameters == True %}
	{ action_respond_info("led_enable  : %d" % (led_enable))  }
	{ action_respond_info("status_macro: \'%s\'" % (status_macro))  }
	{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }
	{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }
	{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }
	{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }
	{ action_respond_info("attach_macro: \'%s\'" % (attach_macro))  }
	{ action_respond_info("detach_macro: \'%s\'" % (detach_macro))  }
	{% endif %}

	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}

	{% if margin_enable == False %}
	{% set margin_size = 0 %}
	{% endif %}

	{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(
	all_points | count,
	bed_mesh_min,
	bed_mesh_max,
	)) }

	{% if fuzz_enable == True %}
	{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}
	{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}
	{% else %}
	{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}
	{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}
	{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}
	{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}
	{% endif %}

	{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
	(x_min, y_min),
	(x_max, y_max),
	)) }

	{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}

	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	{ action_respond_info( "Algorithm: {}".format(algorithm)) }

	{% set points_x = [points_x, min_points]|max  %}
	{% set points_y = [points_y, min_points]|max  %}
	{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

	{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
	{% set ref_index = (points_x * points_y / 2) | int %}
	{ action_respond_info( "Reference index: {}".format(ref_index) ) }
	{% else %}
	{% set ref_index = -1 %}
	{% endif %}

	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}

	{% if led_enable == True %}
	{status_macro}
	{% endif %}

	_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}

	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro SETUP_KAMP_MESHING]
gcode =
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE='"{params.STATUS_MACRO|default('status_meshing')|string}"'

	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}

	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE='"{params.ATTACH_MACRO|default('Attach_Probe')|string}"'
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE='"{params.DETACH_MACRO|default('Dock_Probe')|string}"'

[gcode_macro CLEAN_NOZZLE]
variable_purge_len = 25
variable_purge_spd = 150
variable_purge_temp_min = 230
variable_purge_ret = 2
variable_ooze_dwell = 2
variable_brush_top = 1
variable_clearance_z = 14
variable_wipe_qty = 3
variable_prep_spd_xy = 3000
variable_prep_spd_z = 1500
variable_wipe_spd_xy = 5000
variable_brush_start = 52
variable_brush_width = 40
variable_bucket_left_width = 67
variable_bucket_right_width = 40
variable_bucket_gap = 22
variable_bucket_start = 0
variable_bucket_pos = 1
gcode =

	{% if "xyz" in printer.toolhead.homed_axes %}
	{% set enable_purge = params.PURGE|default(0)|int%}

	STATUS_CLEANING


	SAVE_GCODE_STATE NAME=clean_nozzle


	G90


	{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}


	{% if enable_purge %}


	SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE VARIABLE=bucket_pos VALUE={(range(2) | random)}


	G1 Z{brush_top + clearance_z} F{prep_spd_z}


	G1 Y{Ry} F{prep_spd_xy}


	G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}



	{% if printer.extruder.temperature >= purge_temp_min %}
	M83
	G1 E{purge_len} F{purge_spd}
	G1 E-{purge_ret} F{purge_spd * 5}
	G4 P{ooze_dwell * 1000}
	G92 E0
	{% endif %}

	{% endif %}


	G1 Z{brush_top + clearance_z} F{prep_spd_z}
	G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}


	G1 Y{Ry}


	G1 Z{brush_top} F{prep_spd_z}


	{% for wipes in range(1, (wipe_qty + 1)) %}
	G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
	G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
	{% endfor %}


	G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}


	M117 Cleaned!
	G1 Z{brush_top + clearance_z} F{prep_spd_z}
	G1 X{bucket_start + (bucket_left_width / 4)} F{prep_spd_xy}


	RESTORE_GCODE_STATE NAME=clean_nozzle

	STATUS_READY

	{% else %}


	{ action_raise_error("Please home your axes!") }
	M117 Please home first!

	{% endif %}

[input_shaper]
shaper_freq_x = 57
shaper_type_x = mzv
shaper_freq_y = 52.6
shaper_type_y = mzv

[delayed_gcode SET_STARTUP_LEDS]
initial_duration = 1
gcode =
	STATUS_READY

[neopixel chamber_right]
pin = PC6
chain_count = 18
color_order = GRBW
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 0.0

[neopixel chamber_left]
pin = PA9
chain_count = 18
color_order = GRBW
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 0.0

[neopixel chamber_center]
pin = PB10
chain_count = 18
color_order = GRBW
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0
initial_white = 0.0

[led_effect chamber_light]
frame_rate = 15
leds =
	neopixel:chamber_left
	neopixel:chamber_center
	neopixel:chamber_right
layers =
	static 0 0 top (0, 0, 0, 1.0)

[led_effect sb_logo_busy]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (1,0,0)

[led_effect sb_logo_cleaning]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect sb_logo_calibrating_z]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect sb_logo_heating]
leds =
	neopixel:sb_leds (1)
autostart = false
frame_rate = 15
layers =
	breathing  3 1 top (1, 0.18, 0)

[led_effect sb_logo_cooling]
leds =
	neopixel:sb_leds (1)
autostart = false
frame_rate = 15
layers =
	breathing  3 1 top (0, 0, 1)

[led_effect sb_logo_homing]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect sb_logo_leveling]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect sb_logo_meshing]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect sb_logo_printing]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect sb_logo_standby]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect sb_logo_part_ready]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (1)
layers =
	breathing  3 1 top (0.0, 1.0, 0.0)

[led_effect sb_nozzle_heating]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (2,3)
layers =
	breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect sb_nozzle_cooling]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (2,3)
layers =
	breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect sb_nozzle_standby]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (2,3)
layers =

	breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect sb_nozzle_part_ready]
autostart = false
frame_rate = 15
leds =
	neopixel:sb_leds (2,3)
layers =
	breathing  3 1 top (0.6, 1.0, 0.0, 0.1)

[led_effect sb_critical_error]
leds =
	neopixel:sb_leds
layers =
	strobe         1  1.5   add        (1.0,  1.0, 1.0)
	breathing      2  0     difference (0.95, 0.0, 0.0)
	static         1  0     top        (1.0,  0.0, 0.0)
autostart = false
frame_rate = 15
run_on_error = true

[led_effect rainbow]
leds =
	neopixel:sb_leds (1)
autostart = true
frame_rate = 15
layers =
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)

[led_effect set_nozzle_leds]
leds =
	neopixel:sb_leds (2,3)
autostart = false
frame_rate = 15
layers =
	static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect set_logo_leds]
leds =
	neopixel:sb_leds (1)
autostart = false
frame_rate = 15
layers =
	static         0  0     top        (1.0,  1.0, 1.0)

[gcode_macro LED_PROFILE_APPLY]
variable_profiles =
	{
	"full": {
	"off": [],
	"ready": ["rainbow", "set_nozzle_leds", "chamber_light"],
	"part_ready": ["sb_nozzle_part_ready", "sb_logo_part_ready", "chamber_light"],
	"busy": ["sb_logo_busy", "set_nozzle_leds", "chamber_light"],
	"heating": ["sb_logo_heating", "sb_nozzle_heating", "chamber_light"],
	"cooling": ["sb_logo_cooling", "sb_nozzle_cooling", "chamber_light"],
	"leveling": ["sb_logo_leveling", "set_nozzle_leds", "chamber_light"],
	"homing": ["sb_logo_homing", "set_nozzle_leds", "chamber_light"],
	"cleaning": ["sb_logo_cleaning", "set_nozzle_leds", "chamber_light"],
	"meshing": ["sb_logo_meshing", "set_nozzle_leds", "chamber_light"],
	"calibrating_z": ["sb_logo_calibrating_z", "set_nozzle_leds", "chamber_light"],
	"printing": ["sb_logo_printing", "set_nozzle_leds", "chamber_light"]
	},
	"toolhead": {
	"off": [],
	"ready": ["rainbow", "set_nozzle_leds"],
	"part_ready": ["sb_nozzle_part_ready", "sb_logo_part_ready"],
	"busy": ["sb_logo_busy", "set_nozzle_leds"],
	"heating": ["sb_logo_heating", "sb_nozzle_heating"],
	"cooling": ["sb_logo_cooling", "sb_nozzle_cooling"],
	"leveling": ["sb_logo_leveling", "set_nozzle_leds"],
	"homing": ["sb_logo_homing", "set_nozzle_leds"],
	"cleaning": ["sb_logo_cleaning", "set_nozzle_leds"],
	"meshing": ["sb_logo_meshing", "set_nozzle_leds"],
	"calibrating_z": ["sb_logo_calibrating_z", "set_nozzle_leds"],
	"printing": ["sb_logo_printing", "set_nozzle_leds"]
	},
	}
variable_selected_profile = "full"
variable_last_status = "ready"
gcode =
	{% set c_profile = selected_profile %}
	{% set c_status  = last_status %}

	{% if "PROFILE" in params %}
	{% if profiles[params.PROFILE|lower] or (params.PROFILE|lower) == "dark" %}
	SET_GCODE_VARIABLE MACRO=LED_PROFILE_APPLY VARIABLE=selected_profile VALUE='"{params.PROFILE|lower}"'
	{% set c_profile = params.PROFILE|lower %}
	{% else %}
	{ action_raise_error("LED profile '%s' not found!" % (params.PROFILE)) }
	{% endif %}
	{% endif %}

	{ action_respond_info("c_profile : %s" % (c_profile)) }

	{% if "STATUS" in params %}
	{% set first_profile = profiles.keys()|first %}
	{% if profiles[first_profile][params.STATUS] %}
	SET_GCODE_VARIABLE MACRO=LED_PROFILE_APPLY VARIABLE=last_status VALUE='"{params.STATUS|lower}"'
	{% set c_status = params.STATUS %}
	{% else %}
	{ action_raise_error("LED profile status %s not found!" % (params.STATUS)) }
	{% endif %}
	{% endif %}

	{ action_respond_info("c_status : %s" % (c_status)) }

	{% set RESTART = params.RESTART|default(1)|int%}
	{% set DARK_MODE = (c_profile == "dark") %}

	{% if RESTART or DARK_MODE %}
	STOP_LED_EFFECTS
	{% endif %}

	{% if not DARK_MODE %}
	{% for effect in profiles[c_profile][c_status] %}
	{ action_respond_info(effect) }
	SET_LED_EFFECT EFFECT={effect}
	{% endfor %}
	{% endif %}

[gcode_macro set_logo_leds_off]
gcode =
	SET_LED_EFFECT EFFECT=set_logo_leds STOP=1

[gcode_macro set_logo_leds_on]
gcode =
	SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode =
	SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode =
	SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1

[gcode_macro STATUS_OFF]
gcode =
	LED_PROFILE_APPLY STATUS=off

[gcode_macro STATUS_READY]
gcode =
	LED_PROFILE_APPLY STATUS=ready

[gcode_macro STATUS_PART_READY]
gcode =
	LED_PROFILE_APPLY STATUS=part_ready

[gcode_macro STATUS_BUSY]
gcode =
	LED_PROFILE_APPLY STATUS=busy

[gcode_macro STATUS_HEATING]
gcode =
	LED_PROFILE_APPLY STATUS=heating

[gcode_macro STATUS_COOLING]
gcode =
	LED_PROFILE_APPLY STATUS=cooling

[gcode_macro STATUS_LEVELING]
gcode =
	LED_PROFILE_APPLY STATUS=leveling

[gcode_macro STATUS_HOMING]
gcode =
	LED_PROFILE_APPLY STATUS=homing

[gcode_macro STATUS_CLEANING]
gcode =
	LED_PROFILE_APPLY STATUS=cleaning

[gcode_macro STATUS_MESHING]
gcode =
	LED_PROFILE_APPLY STATUS=meshing

[gcode_macro STATUS_CALIBRATING_Z]
gcode =
	LED_PROFILE_APPLY STATUS=calibrating_z

[gcode_macro STATUS_PRINTING]
gcode =
	LED_PROFILE_APPLY STATUS=printing

[gcode_macro _BEDFANVARS]
variable_threshold = 85
variable_fast = 0.9
variable_slow = 0.6
gcode =

[fan_generic BedFans]
pin = PE6
cycle_time = 0.04
kick_start_time = 0.5

[gcode_macro BEDFANSSLOW]
gcode =

	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}

	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode =

	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}

	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode =
	SET_FAN_SPEED FAN=BedFans SPEED=0

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing = _SET_HEATER_TEMPERATURE
gcode =

	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}

	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

	{% if HEATER|lower == "extruder" %}
	M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
	M99140 S{TARGET}
	{% else %}
	{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}


	{% if HEATER|lower == "heater_bed" %}
	{% if TARGET >= THRESHOLD %}
	BEDFANSSLOW
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
	{% else %}
	BEDFANSOFF
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0
	{% endif %}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode =

	{% set S = params.S|int %}

	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

	{% if S >= THRESHOLD %}
	BEDFANSSLOW
	{% else %}
	BEDFANSOFF
	{% endif %}

	M140 {% for p in params
	%}{'%s%s' % (p, params[p])}{%
	endfor %}

	{% if S != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}
	{% endif %}


	{% if S >= THRESHOLD %}
	BEDFANSFAST
	{% endif %}

[gcode_macro M140]
rename_existing = M99140
gcode =

	{% set S = params.S|float %}

	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

[gcode_macro TURN_OFF_HEATERS]
rename_existing = _TURN_OFF_HEATERS
gcode =
	BEDFANSOFF
	_TURN_OFF_HEATERS

[delayed_gcode bedfanloop]
gcode =

	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

	{% if printer.heater_bed.target >= THRESHOLD %}
	{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
	BEDFANSFAST
	{% else %}
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
	{% endif %}
	{% endif %}

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode =
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if not tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode =
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}

	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}

	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}
	{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},
	'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},
	'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode =
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',
	'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',
	'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}
	SET_GCODE_OFFSET X=0 Y=0
	G90
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode =
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode =
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode =
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode =
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode =
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode =
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing}
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode =
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[z_calibration]
nozzle_xy_position = 196,307
switch_xy_position = 191,289
switch_offset = 0.525
start_gcode = ATTACH_PROBE
end_gcode = DOCK_PROBE
max_deviation = 2.0

[gcode_macro CALIBRATE_Z]
rename_existing = BASE_CALIBRATE_Z
gcode =
	M117 Z-Calibration..
	SET_GCODE_OFFSET Z=0
	BASE_CALIBRATE_Z
	M117

[respond]

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode =

[gcode_macro _klicky_check_variables_version]
gcode =
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}

	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _KlickyDebug]
gcode =
	{% set message  = params.MSG %}
	{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}

	{% if debug %}
	{ action_respond_info(message) }
	{% endif %}

[gcode_macro _exit_point]
gcode =
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}


	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode =
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}

	M400
	SAVE_GCODE_STATE NAME={function}

	SET_GCODE_OFFSET Z=0

	G90

	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode =
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode =
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode =
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode =
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode =
	_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro _DeployKlickyDock]
description = Deploys Klicky servo-controlled dock
gcode =
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}


	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"
	{% if servo_deploy == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }
	{% endif %}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _DeployDock"] is defined %}
	_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"
	_DeployDock
	{% endif %}

[gcode_macro _RetractKlickyDock]
description = Retracts Klicky servo-controlled dock
gcode =
	{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
	{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
	{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
	{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}


	M400
	{% if enable_dock_servo != False %}
	_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"
	{% if servo_retract == 360 %}
	{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }
	{% endif %}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"
	SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}
	M400
	G4 P{servo_delay|int}
	_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"
	SET_SERVO SERVO={servo_name|string} WIDTH=0
	{% elif printer["gcode_macro _RetractDock"] is defined %}
	_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"
	_RetractDock
	{% endif %}

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode =

	{% set goback  = params.BACK|default(0) %}

	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}

	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}

	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}


	_entry_point function=Attach_Probe

	{% if bypass_probe_docking == False %}


	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	_KlickyDebug msg="Attach_Probe Axis homed"


	{% elif not probe_attached and not probe_lock %}
	_KlickyDebug msg="Attach_Probe going to attach probe"
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY

	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	_KlickyDebug msg="Attach_Probe z_hop disabled"
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}



	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero, duplicate?") }
	{% endif %}
	_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}

	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_Umbilical_Path

	_entry_point function=Attach_Probe_intern


	_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}


	_DeployKlickyDock



	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}


	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}


	_RetractKlickyDock


	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_Park_Toolhead

	_CheckProbe action=attach

	_exit_point function=Attach_Probe_intern move={goback}
	_KLICKY_STATUS_READY

	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}


	_KlickyDebug msg="Attach_Probe probe locked not attaching probe"
	_CheckProbe action=query

	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}


	_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"
	_CheckProbe action=query

	{% endif %}

	_exit_point function=Attach_Probe
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode =

	{% set goback  = params.BACK|default(0) %}

	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}

	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}

	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
	{% if bypass_probe_docking == False %}
	{% else %}
	_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"
	{% endif %}


	{% if bypass_probe_docking == False %}
	_entry_point function=Dock_Probe


	{% if probe_attached and not probe_lock %}

	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% endif %}
	_KlickyDebug msg="Dock_Probe Axis homed"
	_KlickyDebug msg="Dock_Probe going to dock probe"
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	_KLICKY_STATUS_BUSY

	{% if printer.toolhead.position.z < safe_z %}
	_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_Umbilical_Path


	_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}


	_DeployKlickyDock


	_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}


	{% if docklocation_z != -128 %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}


	_RetractKlickyDock


	_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}


	{% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
	_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_Park_Toolhead

	G4 P1000
	_CheckProbe action=dock
	_KLICKY_STATUS_READY

	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}


	_KlickyDebug msg="Dock_Probe probe locked not docking probe"
	_CheckProbe action=query

	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}


	_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"
	_CheckProbe action=query

	{% endif %}

	_exit_point function=Dock_Probe move={goback}
	{% else %}
	_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"
	{% endif %}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode =
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}


	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_calibrate Axis homed"
	_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"


	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }
	{% endif %}

	{% if bypass_probe_docking == False %}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_KLICKY_STATUS_CALIBRATING_Z

	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}

	M118 moving the toolhead 20 mm from the bed
	_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"
	TESTZ Z=20
	M118 remove manually the probe and continue calibration
	_KLICKY_STATUS_READY
	{% else %}
	_KLICKY_STATUS_CALIBRATING_Z
	_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	_KLICKY_STATUS_READY
	{% endif %}

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode =
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_KlickyDebug msg="probe_accuracy Axis homed"
	_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"

	_entry_point function=PROBE_ACCURACY


	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < - probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < - probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }
	{% endif%}

	_CheckProbe action=query
	Attach_Probe back=1

	_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}

	Dock_Probe back=1

	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode =

	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}

	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set kinematic_z = 0 %}
	{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}
	{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}
	{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default('') %}


	_klicky_check_variables_version

	_CheckProbe action=query


	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}

	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}


	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}

	{% set home_x, home_y, home_z = True, True, True %}
	_KlickyDebug msg="homing_override goint to home all axes"

	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	_KlickyDebug msg="homing_override goint to home X"

	{% endif %}

	{% if 'Y' in params %}
	{% set home_y = True %}
	_KlickyDebug msg="homing_override goint to home Y"
	{% endif %}

	{% if 'Z' in params %}
	{% set home_z = True %}
	_KlickyDebug msg="homing_override goint to home Z"
	{% endif %}

	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}


	_Homing_Variables reset=1
	_KlickyDebug msg="homing_override goint to home all axes"
	{% endif %}

	{% endif %}

	_entry_point function=homing_override
	_KLICKY_STATUS_HOMING


	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	_KlickyDebug msg="homing_override z_hop disabled"

	{% set kinematic_z = safe_z %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}


	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("No axis homed") }
	{% endif %}
	_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"
	SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
	M400
	_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.toolhead.position.z}mm"
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	_KlickyDebug msg="homing_override clearing axis homed state"
	M84
	{% endif %}

	{% if home_z %}
	{% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
	{% if verbose %}
	{ action_respond_info("X or Y not homed, forcing full G28") }
	{% endif %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}


	{% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}

	{% if home_y %}
	{% if override_homing == 'Y' %}
	_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"
	{% else %}
	_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"
	{% endif %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y G28 Y0"
	G28 Y0

	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}
	{% set home_y = False %}
	{% endif %}



	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"
	_HOME_X
	{% else %}
	_KlickyDebug msg="homing_override Homing X, G28 X0"
	G28 X0

	{% if home_backoff_x != 0 %}
	{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"
	G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}


	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
	_HOME_Y
	{% else %}
	_KlickyDebug msg="homing_override Homing Y, G28 Y0"
	G28 Y0
	{% if home_backoff_y != 0 %}
	{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
	{% else %}
	_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
	G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
	{%endif %}
	{%endif %}
	{% endif %}
	{% endif %}

	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}


	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"
	Attach_Probe

	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% elif dock_on_zhome == True %}
	Dock_Probe
	{% endif %}

	_Home_Z


	{% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
	_KlickyDebug msg="homing_override probe no longer required, docking probe"
	Dock_Probe
	{% elif dock_on_zhome == False %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query


	_Park_Toolhead

	_exit_point function=homing_override
	_KLICKY_STATUS_READY

[gcode_macro _Umbilical_Path]
gcode =
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}

	{% if umbilical %}

	_entry_point function=Umbilical_Path

	_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}

	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode =
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	_entry_point function=Home_Z


	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	_KlickyDebug msg="_Home_Z XY Axis homed"
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	_KlickyDebug msg="_Home_Z Z not homed, setting position as X=Y=Z=0"
	SET_KINEMATIC_POSITION Z=0
	{% endif %}



	_KlickyDebug msg="_Home_Z moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	_KlickyDebug msg="_Home_Z Homing Z G28 Z"
	G28 Z0
	_KlickyDebug msg="_Home_Z toolhead too low, raising it to {safe_z}mm from {printer.toolhead.position.z}mm"
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode =
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode =
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}


	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}

	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}

	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}




	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}


	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode =
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	_entry_point function=Park_Toolhead

	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	{% if parkposition_z == -128 %}
	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}

	{% else %}

	_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}

	{% endif %}

	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro _klicky_status_ready]
gcode =
	{% if printer['gcode_macro status_ready'] is defined %}
	_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"
	STATUS_READY
	{% endif %}

[gcode_macro _klicky_status_busy]
gcode =
	{% if printer['gcode_macro status_busy'] is defined %}
	_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"
	STATUS_BUSY
	{% endif %}

[gcode_macro _klicky_status_leveling]
gcode =
	{% if printer['gcode_macro status_leveling'] is defined %}
	_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"
	STATUS_LEVELING
	{% endif %}

[gcode_macro _klicky_status_homing]
gcode =
	{% if printer['gcode_macro status_homing'] is defined %}
	_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"
	STATUS_HOMING
	{% endif %}

[gcode_macro _klicky_status_cleaning]
gcode =
	{% if printer['gcode_macro status_cleaning'] is defined %}
	_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"
	STATUS_CLEANING
	{% endif %}

[gcode_macro _klicky_status_meshing]
gcode =
	{% if printer['gcode_macro status_meshing'] is defined %}
	_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"
	STATUS_MESHING
	{% endif %}

[gcode_macro _klicky_status_calibrating_z]
gcode =
	{% if printer['gcode_macro status_calibrating_z'] is defined %}
	_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"
	STATUS_CALIBRATING_Z
	{% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing = _QUAD_GANTRY_LEVEL
description = Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode =
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("QG Level") }
	{% endif %}

	_CheckProbe action=query
	G90
	Attach_Probe
	_KLICKY_STATUS_LEVELING

	_QUAD_GANTRY_LEVEL {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe

[gcode_macro _User_Variables]
variable_verbose = True
variable_debug = False
variable_travel_speed = 200
variable_move_accel = 1000
variable_dock_speed = 50
variable_release_speed = 75
variable_z_drop_speed = 10
variable_safe_z = 10
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 196
variable_z_endstop_y = 307
variable_docklocation_x = 30
variable_docklocation_y = 310
variable_docklocation_z = -128
variable_enable_dock_servo = False
variable_servo_name = 'NAME'
variable_servo_deploy = 10
variable_servo_retract = 11
variable_servo_delay = 250
variable_dockmove_x = 50
variable_dockmove_y = 0
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = True
variable_parkposition_x = 150
variable_parkposition_y = 150
variable_parkposition_z = -128
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
variable_home_backoff_x = 10
variable_home_backoff_y = 10
variable_override_homing = ''
variable_dock_on_zhome = False
variable_bypass_probe_docking = False
gcode =
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}


	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }


	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[gcode_macro START_PRINT]
description = Commands to run before print
variable_bedtemp = 0
variable_hotendtemp = 0
variable_chambertemp = 0
gcode =
	G92 E0
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
	{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}

	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bedtemp VALUE={BED_TEMP}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=hotendtemp VALUE={EXTRUDER_TEMP}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chambertemp VALUE={CHAMBER_TEMP}
	CLEAR_PAUSE

	M140 S{BED_TEMP}

	_CG28
	BED_MESH_CLEAR

	{% if printer['temperature_fan chamber'].temperature < CHAMBER_TEMP or printer.heater_bed.temperature < (BED_TEMP - 2)  %}
	HEATSOAK T={BED_TEMP} C={CHAMBER_TEMP} MOVE=1 WAIT=1
	{% else %}
	HEATSOAK T={BED_TEMP} C={CHAMBER_TEMP} MOVE=0 WAIT=1
	{% endif %}

	ATTACH_PROBE_LOCK
	QUAD_GANTRY_LEVEL
	G28 Z
	G90
	G0 Z20
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500
	BED_MESH_CALIBRATE

	M104 S{EXTRUDER_TEMP}

	G0 Z20

	DOCK_PROBE_UNLOCK

	G0 X{printer["gcode_macro CLEAN_NOZZLE"].brush_start|float} Y{printer.configfile.config["stepper_y"]["position_max"]|float} F19500

	M109 S{EXTRUDER_TEMP}

	CLEAN_NOZZLE PURGE=0

	CALIBRATE_Z

	G0 Z20
	G0 X{printer["gcode_macro CLEAN_NOZZLE"].brush_start|float} Y{printer.configfile.config["stepper_y"]["position_max"]|float} F19500

	CLEAN_NOZZLE PURGE=1

	G0 Z20
	PARK_CENTER

	{% if Z_ADJUST %}
	{ action_respond_info('Adjusting gcode z-offset by %s' % (Z_ADJUST, )) }
	SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1
	{% endif %}

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode =
	CANCEL_PRINT_BASE
	END_PRINT

[gcode_macro END_PRINT]
gcode =
	CLEAR_PAUSE
	M400


	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}

	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}

	G91
	G1 E-1 F2100
	G1 Z{z_safe} F3000
	G1 E-25 F250
	G90
	G92 E0
	M104 S0
	M140 S{printer["gcode_macro START_PRINT"].bedtemp|int}
	M107
	PARK_REAR

[gcode_macro HEATSOAK]
gcode =

	{% set t = params.T|default(110)|int %}
	{% set c = params.C|default(35)|int %}
	{% set move = params.MOVE|default(1)|int %}
	{% set wait = params.WAIT|default(0)|int %}

	SAVE_GCODE_STATE NAME=HEATSOAK

	M104 S0
	M140 S{t}

	SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={c}


	{% if move == 1 %}
	_CG28
	PARK_CENTER
	{% endif %}

	{% if c > 30 and wait == 1 %}
	STATUS_HEATING
	TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={c}
	STATUS_READY
	{% endif %}

	M190 S{t}

	RESTORE_GCODE_STATE NAME=HEATSOAK

[gcode_macro LOAD_FILAMENT]
gcode =
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT
	G91
	G92 E0
	M83
	G1 E60 F1500
	G1 E25 F150
	RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
gcode =
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT
	G91
	G92 E0
	G1 E25 F300
	G1 E-100 F1500
	RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro _CG28]
description = Home only if not already homed
gcode =
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro _CQGL]
description = QGL only if not already
gcode =
	{% if printer.quad_gantry_level.applied == False %}
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
variable_default_zhop = 10
gcode =

	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}

	{% if act_z < (max_z - default_zhop) %}
	{% set z_safe = default_zhop %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{ action_respond_info("Pause zhop (%s) exceeds maximum Z height. Moving by %s..." % (default_zhop, z_safe)) }
	{% endif %}

	{% if printer["pause_resume"].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z_safe}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}

	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G91
	G1 Z{z_safe} F900
	G90
	PARK_REAR
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode =

	{% set e = params.E|default(2.5)|float %}

	{% if printer["pause_resume"].is_paused|int == 1 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro M600]
description = Filament change compatibility
gcode =
	PAUSE

[gcode_macro PARK_CENTER]
gcode =
	_CG28
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARK_REAR]
gcode =
	_CG28
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro _RESETSPEEDS]
description = Reset speeds to maximum configured
gcode =
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

[gcode_macro DUMP_VARIABLES]
gcode =
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}

	{% set out = [] %}

	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}

	{action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode =
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}

	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}

	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}

	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}

	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}

	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}